# Generated by Selenium IDE
import json
import time
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from selenium.webdriver.common.alert import Alert
from selenium.webdriver.chrome.options import Options

class HandRaiser():
  def setup_method(self):
    chrome_options = Options()
    # keeps the window open indefinitely
    chrome_options.add_experimental_option("detach", True)
    self.driver = webdriver.Chrome(options=chrome_options)
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def sign_in(self):
    # visit Zoom link + setup window
    self.driver.get("https://viam.zoom.us/j/81068375503?pwd=6pPUih4URPrhfH8ebjpNTnX7uqVwq0.1")
    self.driver.set_window_size(1440, 790)

    # dismiss alert
    # WebDriverWait(self.driver, 10).until(EC.alert_is_present())
    # alert = self.driver.switch_to.alert
    # alert.dismiss()
    
    # click join
    self.driver.find_element(By.LINK_TEXT, "Join from Your Browser").click()

    # set name for meeting
    WebDriverWait(self.driver, 5).until(lambda d : self.driver.find_element(By.ID, "input-for-name").is_displayed())
    self.driver.find_element(By.ID, "input-for-name").send_keys("Hand Raiser")

    # open the participants menu
    # self.driver.find_element(By.CSS_SELECTOR, ".zm-btn").click()
    # self.driver.find_element(By.CSS_SELECTOR, ".footer__button-wrap:nth-child(1) .footer-button-base__img-layer").click()

  def get_hands(self):
    # query page for hand icon
    return self.driver.find_element(By.CSS_SELECTOR, ".lazy-svg-icon__icon .lazy-icon-nvf/270b")
